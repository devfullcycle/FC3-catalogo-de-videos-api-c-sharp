schema {
  query: Query
  mutation: Mutation
}

type Query {
  categories(page: Int! = 1 perPage: Int! = 10 search: String! = "" sort: String! = "" direction: SearchOrder! = ASC): SearchCategoryPayload!
  genres(page: Int! = 1 perPage: Int! = 10 search: String! = "" sort: String! = "" direction: SearchOrder! = ASC): SearchGenrePayload!
}

type Mutation {
  saveCategory(input: SaveCategoryInput!): CategoryPayload!
  deleteCategory(id: UUID!): Boolean!
}

enum SearchOrder {
  ASC
  DESC
}

type SearchCategoryPayload {
  currentPage: Int!
  perPage: Int!
  total: Int!
  items: [CategoryPayload!]!
}

type CategoryPayload {
  id: UUID!
  name: String!
  description: String!
  isActive: Boolean!
  createdAt: DateTime!
}

input SaveCategoryInput {
  id: UUID!
  name: String!
  description: String!
  isActive: Boolean!
  createdAt: DateTime!
}

scalar UUID

type SearchGenrePayload {
  currentPage: Int!
  perPage: Int!
  total: Int!
  items: [GenrePayload!]!
}

type GenrePayload {
  id: UUID!
  name: String
  isActive: Boolean!
  createdAt: DateTime!
  categories: [GenreCategoryPayload!]
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type GenreCategoryPayload {
  id: UUID!
  name: String
}